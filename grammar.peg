grammar oskar
start                   <- top_level+
top_level               <- function_definition / variable_definition / picture_definition

function_definition     <- identifier parameters "=" _ expression %function_definition
parameters              <- "(" _ parameters:(first:parameter rest:("," _ parameter)* )? ")" _ %parameters
parameter               <- identifier default:("=" _ literal)? %parameter

variable_definition     <- identifier "=" _ expression

picture_definition      <- identifier parameters? "<<" _ picture_component ( csg_operator picture_component )*
csg_operator            <- ("++" / "--" / "&&") _
picture_component       <- (picture_set transform_set*) / (identifier arguments)
picture_set             <- "[" _ basis num_pics transformation* "]" _
transform_set           <- "[" _ num_pics transformation* "]" _
basis                   <- identifier arguments
num_pics                <- "{" (literal / identifier) "}" _
transformation          <- operator arguments

expression              <- expression:(infix / invocation / literal / identifier) semicolon %expression
infix                   <- lhs:term op:operator rhs:expression %infix
term                    <- ("(" _ expression ")" _) / invocation / literal / identifier
operator                <- [\+\*\/\-\@] _ %operator
invocation              <- identifier arguments
arguments               <- "(" _ (expression? ("," _ expression?)* )? ")" _

literal                 <- number _ %literal
identifier              <- !number symbol _ %identifier
number                  <- digits _ %number
symbol                  <- [^\s(),#=]+
digits                  <- "-"? [0-9\.]+
semicolon               <- (";" _)?

_                       <- whitespace? comment? %ignore
whitespace              <- [\n\s]*
comment                 <- "#" [^\n]* whitespace
